CREATE TABLE UserMaster (
    UserMasterID NUMBER DEFAULT user_seq.NEXTVAL PRIMARY KEY, -- Primary key
    UserID VARCHAR2(25) NOT NULL, -- Unique User ID
    FirstName VARCHAR2(100) NOT NULL, -- First name of the user
    LastName VARCHAR2(100), -- Last name of the user
    Email VARCHAR2(100) NOT NULL UNIQUE, -- Unique email address
    PasswordHash VARCHAR2(255) NOT NULL, -- Hashed password for security
    PhoneNumber VARCHAR2(15) NOT NULL, -- Contact phone number
    Gender VARCHAR2(6) NOT NULL CHECK (Gender IN ('Male', 'Female', 'Other')), -- Gender with validation
    UserRole VARCHAR2(20) DEFAULT 'User' NOT NULL CHECK (UserRole IN ('User', 'Admin', 'Moderator')), -- User roles
    DateCreated TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Account creation date
    ModifiedBy VARCHAR2(25), -- Reference to the admin/modifier
    DateModified TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Last modified timestamp (will be updated via trigger)
    LastLogin TIMESTAMP, -- Last login timestamp
    Status VARCHAR2(10) NOT NULL CHECK (Status IN ('Active', 'Inactive', 'Blacklisted')) -- Account status
);


-- Create the Products Table
CREATE TABLE Products (
    ProductID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Auto-generated Product ID
    ProductCode VARCHAR2(50) UNIQUE, -- Unique product code by company
    CategoryID NUMBER, -- Foreign key to Categories table
    ProductName VARCHAR2(255) NOT NULL, -- Product name
    Brand VARCHAR2(100), -- Brand of the product
    Rating NUMBER(3, 2) DEFAULT 0, -- Rating out of 5 (e.g., 4.5)
    TotalRatings NUMBER DEFAULT 0, -- Total number of ratings (e.g., 3951)
    Price NUMBER(10, 2) NOT NULL, -- Product price (e.g., ₹17,995)
    MRP NUMBER(10, 2) NOT NULL, -- Original price before discount (e.g., ₹21,995)
    DiscountPercentage NUMBER(5, 2), -- Discount percentage (e.g., 18%)
    Description CLOB, -- Full product description
    Specifications CLOB CHECK (Specifications IS JSON), -- Store JSON data
    ShippingWeight NUMBER(10, 2), -- Weight in kg
    ShippingDimensions VARCHAR2(100), -- E.g., "30x20x15 cm"
    PayOnDelivery NUMBER(1) DEFAULT 1, -- 1 for Pay on Delivery, 0 otherwise
    ReplacementDay NUMBER(2, 0), -- E.g., '7'
    WarrantyPeriod VARCHAR2(50), -- E.g., '2 Year Warranty'
    Manufacturer VARCHAR2(255), -- Manufacturer details
    BrandOrigin VARCHAR2(100), -- Country of origin
    ModelName VARCHAR2(255), -- Product Model
    Unit VARCHAR2(20), -- Unit of measurement
    HSN VARCHAR2(20), -- Harmonized System of Nomenclature code
    DateAdded TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date the product was added
    LastUpdated TIMESTAMP, -- When the product was last updated
    UpdatedBy VARCHAR2(100), -- Username of the admin who updated it
    PromoStartDate DATE, -- Start of the promotion
    PromoEndDate DATE, -- End of the promotion
    Status VARCHAR2(10) default 'Active', -- Product status (e.g., Active, Inactive)
    CONSTRAINT fk_category FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID) -- Foreign key constraint
);





-- Create the Categories Table
CREATE TABLE Categories (
    CategoryID NUMBER DEFAULT CategoryID_Seq.NEXTVAL PRIMARY KEY, -- Auto-generated ID
    CategoryName VARCHAR2(150) NOT NULL UNIQUE, -- Name of the category
    CategoryDescription CLOB, -- Description for the category
    DateAdded TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date the category was added
    LastUpdated TIMESTAMP, -- When the category was last updated
    UpdatedBy VARCHAR2(100), -- Admin who last updated the category
    Status VARCHAR2(10) default 'Active'  -- Status (e.g., Active, Inactive)
);


CREATE TABLE ProductVariants (
    VariantID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique ID for each variant
    ProductID NUMBER NOT NULL REFERENCES Products(ProductID), -- Foreign key to Products table
    Color VARCHAR2(50), -- Color variant (e.g., Red, Blue)
    Size_ VARCHAR2(50), -- Optional size variant (e.g., XS, M, L)
    Pattern_ VARCHAR2(50) -- Pattern variant (e.g., Striped, Solid)
);

CREATE TABLE ProductImages (
    ImageID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique ID for each image
    ProductID NUMBER NOT NULL REFERENCES Products(ProductID), -- Foreign key to Products table
    VariantID NUMBER REFERENCES ProductVariants(VariantID), -- Optional foreign key to ProductVariants table
    ImageURL VARCHAR2(500) NOT NULL, -- URL/path to the image
    IsPrimary NUMBER(1) DEFAULT 0, -- 1 if this is the primary image for the product/variant, 0 otherwise
    DateAdded TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp when the image was added
    LastUpdated TIMESTAMP -- Timestamp when the image was last updated
);


CREATE TABLE "FAQ" (
    "FAQID" NUMBER GENERATED BY DEFAULT AS IDENTITY,
    "PRODUCTID" NUMBER NOT NULL,
    "QUESTION" CLOB NOT NULL,
    "ANSWER" CLOB,
    "DATEASKED" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "DATEANSWERED" TIMESTAMP,
    "STATUS" VARCHAR2(20) DEFAULT 'Pending' NOT NULL,
    "ASKEDBY" VARCHAR2(20),
    "ANSWEREDBY" VARCHAR2(20),
    "APPROVEDBY" VARCHAR2(20),
    PRIMARY KEY ("FAQID"),
    FOREIGN KEY ("PRODUCTID") REFERENCES "ADMIN"."PRODUCTS"("PRODUCTID")
);



CREATE TABLE Reviews (
    ReviewID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique ID for each review
    ProductID NUMBER NOT NULL REFERENCES Products(ProductID) ON DELETE CASCADE, -- Foreign key to Products table
    VarientID NUMBER NOT NULL REFERENCES PRODUCTVARIANTS(VARIANTID) ON DELETE CASCADE, -- Foreign key to Products table
    UserID NUMBER NOT NULL REFERENCES UserMaster(UserMasterID) ON DELETE CASCADE, -- Foreign key to UserMaster table
    Rating NUMBER(2, 1) NOT NULL CHECK (Rating BETWEEN 1 AND 5), -- Rating out of 5
    ReviewText CLOB, -- Review text
    DatePosted TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date when the review was posted
    ReplyText CLOB, -- Admin's reply to the review
    DateReplied TIMESTAMP, -- Date when the reply was posted
    RepliedBy NUMBER REFERENCES UserMaster(UserMasterID), -- Admin who replied
    Status VARCHAR2(20) DEFAULT 'Pending' CHECK (Status IN ('Pending', 'Approved','Replied', 'Rejected')), -- Status of the review
    ApprovedBy NUMBER REFERENCES UserMaster(UserMasterID) -- Admin who approved the review
);


CREATE TABLE Inventory (
    InventoryID NUMBER DEFAULT Inventory_Seq.NEXTVAL PRIMARY KEY, -- Uses the sequence for generating IDs
    ProductID NUMBER NOT NULL REFERENCES Products(ProductID), -- Foreign key to Products table
    VariantID NUMBER REFERENCES ProductVariants(VariantID), -- Foreign key to ProductVariants table (nullable for products without variants)
    WarehouseLocation VARCHAR2(255), -- Location or warehouse storing the stock
    StockLevel NUMBER DEFAULT 0 CHECK (StockLevel >= 0), -- Total stock available
    ReservedStock NUMBER DEFAULT 0 CHECK (ReservedStock >= 0), -- Stock reserved for pending orders
    MinimumStockLevel NUMBER DEFAULT 5, -- Minimum stock threshold for restocking alerts
    RestockDate TIMESTAMP, -- Next restocking date (if known)
    DateUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- When the inventory was last updated
    UpdatedBy VARCHAR2(20) -- Admin or user who updated the inventory
);

CREATE TABLE Orders (
    OrderID NUMBER DEFAULT Orders_Seq.NEXTVAL PRIMARY KEY, -- Unique ID for each order
    UserID NUMBER NOT NULL REFERENCES UserMaster(UserMasterID), -- Foreign key to Users table
    OrderDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date and time the order was placed
    TotalPrice NUMBER(10, 2) NOT NULL CHECK (TotalPrice >= 0), -- Total price for this order
    PaymentMethod VARCHAR2(50) CHECK (PaymentMethod IN ('Credit Card', 'Debit Card', 'Net Banking', 'Cash on Delivery', 'UPI', 'Wallet')), -- Payment method used
    PaymentStatus VARCHAR2(20) CHECK (PaymentStatus IN ('Paid', 'Pending', 'Failed', 'Refunded')), -- Payment status
    OrderStatus VARCHAR2(20) DEFAULT 'Pending' CHECK (OrderStatus IN ('Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled', 'Returned')), -- Order status
    ShippingAddress VARCHAR2(255) NOT NULL, -- Shipping address for the order
    BillingAddress VARCHAR2(255) NOT NULL, -- Billing address for the order
    EstimatedDeliveryDate TIMESTAMP, -- Estimated delivery date
    DeliveredDate TIMESTAMP, -- Actual delivery date
    CancelledDate TIMESTAMP, -- Date when the order was cancelled (if applicable)
    DateUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Last updated timestamp
    UpdatedBy VARCHAR2(50) -- Admin or user who updated the order
);

CREATE TABLE OrderDetails (
    OrderDetailID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique ID for each detail entry
    OrderID NUMBER NOT NULL REFERENCES Orders(OrderID) ON DELETE CASCADE, -- Foreign key to Orders table
    ProductID NUMBER NOT NULL REFERENCES Products(ProductID), -- Foreign key to Products table
    VariantID NUMBER REFERENCES ProductVariants(VariantID), -- Foreign key to ProductVariants table (nullable if no variants)
    Quantity NUMBER NOT NULL CHECK (Quantity > 0), -- Quantity of product ordered
    PricePerUnit NUMBER(10, 2) NOT NULL CHECK (PricePerUnit >= 0), -- Price per unit of the product
    TotalPrice NUMBER(10, 2) NOT NULL CHECK (TotalPrice >= 0) -- Total price for this product in the order
);


CREATE TABLE Notifications (
    NotificationID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique notification ID
    UserID NUMBER REFERENCES UserMaster(UserMasterID) ON DELETE CASCADE, -- Foreign key to UserMaster
    Title VARCHAR2(255) NOT NULL, -- Title or subject of the notification
    Message CLOB NOT NULL, -- Main content of the notification
    NotificationType VARCHAR2(50) CHECK (NotificationType IN ('Order Update', 'System Alert', 'Promotion', 'Reminder', 'Custom')), -- Type of notification
    IsRead CHAR(1) DEFAULT 'N' CHECK (IsRead IN ('Y', 'N')), -- Read status ('Y' for read, 'N' for unread)
    CreatedDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Notification creation date
    ReadDate TIMESTAMP, -- Date when the notification was read
    Status VARCHAR2(20) DEFAULT 'Active' CHECK (Status IN ('Active', 'Archived')) -- Notification status
);


CREATE TABLE Wishlist (
    WishlistID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique wishlist entry ID
    UserID NUMBER NOT NULL REFERENCES UserMaster(UserMasterID) ON DELETE CASCADE, -- Foreign key to UserMaster
    ProductID NUMBER NOT NULL REFERENCES Products(ProductID) ON DELETE CASCADE, -- Foreign key to Products table
    VariantID NUMBER NOT NULL REFERENCES PRODUCTVARIANTS(VARIANTID) ON DELETE CASCADE, -- Foreign key to Variant table
    AddedDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date when the product was added to the wishlist
    Quantity NUMBER DEFAULT 1 CHECK (Quantity > 0), -- Number of units of the product
    Status VARCHAR2(20) DEFAULT 'Active' CHECK (Status IN ('Active', 'Purchased', 'Removed')), -- Status of the product in the wishlist
    CONSTRAINT wishlist_unique UNIQUE (UserID, ProductID) -- Ensures a user cannot add the same product multiple times
);


CREATE TABLE Cart (
    CartID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique cart entry ID
    UserID NUMBER NOT NULL REFERENCES UserMaster(UserMasterID) ON DELETE CASCADE, -- Foreign key to UserMaster
    ProductID NUMBER NOT NULL REFERENCES Products(ProductID) ON DELETE CASCADE, -- Foreign key to Products
    VariantID NUMBER REFERENCES ProductVariants(VariantID), -- Foreign key to ProductVariants (nullable)
    Quantity NUMBER NOT NULL CHECK (Quantity > 0), -- Quantity of the product in the cart
    AddedDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date and time the product was added
    Status VARCHAR2(20) DEFAULT 'Active' CHECK (Status IN ('Active', 'Ordered', 'Removed')), -- Status of the cart item
    CONSTRAINT cart_unique UNIQUE (UserID, ProductID, VariantID) -- Ensures a user cannot add the same product/variant combination multiple times
);


CREATE TABLE Address (
    AddressID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique address ID
    UserID NUMBER NOT NULL REFERENCES UserMaster(UserMasterID) ON DELETE CASCADE, -- Foreign key to UserMaster
    Name VARCHAR2(255) NOT NULL, -- Name of the person for this address
    Mobile VARCHAR2(15) NOT NULL, -- Primary mobile number
    Pincode VARCHAR2(10) NOT NULL, -- Postal/ZIP code
    Locality VARCHAR2(255) NOT NULL, -- Locality or neighborhood
    Address VARCHAR2(500) NOT NULL, -- Detailed address (area and street)
    City VARCHAR2(100) NOT NULL, -- City/District/Town
    State VARCHAR2(100) NOT NULL, -- State
    Landmark VARCHAR2(255), -- Optional landmark
    AlternatePhone VARCHAR2(15), -- Optional alternate phone number
    AddressType VARCHAR2(20) DEFAULT 'Home' NOT NULL CHECK (AddressType IN ('Home', 'Work')), -- Address type
    IsDefault CHAR(1) DEFAULT 'N' CHECK (IsDefault IN ('Y', 'N')), -- Default address flag
    DateAdded TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date and time the address was added
    DateUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Last updated timestamp
);


CREATE TABLE Promotions (
    PromotionID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique identifier
    PromotionName VARCHAR2(255) NOT NULL, -- Name of the promotion (e.g., "Holiday Sale" or "WELCOME10")
    PromotionType VARCHAR2(50) NOT NULL CHECK (PromotionType IN ('Discount', 'Coupon')), -- Type of promotion
    Code VARCHAR2(50), -- Coupon code (nullable for discounts)
    DiscountType VARCHAR2(50) NOT NULL CHECK (DiscountType IN ('Percentage', 'Flat')), -- Type of discount
    DiscountValue NUMBER(10, 2) NOT NULL CHECK (DiscountValue > 0), -- Discount value
    ProductID NUMBER REFERENCES Products(ProductID) ON DELETE CASCADE, -- Applies to a specific product (nullable)
    CategoryID NUMBER REFERENCES Categories(CategoryID) ON DELETE CASCADE, -- Applies to a specific category (nullable)
    MinimumOrderValue NUMBER(10, 2) CHECK (MinimumOrderValue >= 0), -- Minimum order value required for the promotion
    MaximumDiscountValue NUMBER(10, 2) CHECK (MaximumDiscountValue >= 0), -- Maximum discount value (for percentage-based promotions)
    StartDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Start date of the promotion
    EndDate TIMESTAMP, -- End date of the promotion
    UsageLimit NUMBER default 9999, -- Maximum number of uses for the promotion
    UsageCount NUMBER DEFAULT 0, -- Number of times the promotion has been used
    Status VARCHAR2(20) DEFAULT 'Active' NOT NULL CHECK (Status IN ('Active', 'Inactive', 'Expired')), -- Status of the promotion
    DateAdded TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date the promotion was created
    DateUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Last updated timestamp
);


CREATE TABLE Transactions (
    TransactionID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique identifier for each transaction
    OrderID NUMBER NOT NULL REFERENCES Orders(OrderID) ON DELETE CASCADE, -- Foreign key to the Orders table
    UserID NUMBER NOT NULL REFERENCES UserMaster(UserMasterID) ON DELETE CASCADE, -- Foreign key to the UserMaster table
    PaymentMethod VARCHAR2(50) NOT NULL CHECK (PaymentMethod IN ('Credit Card', 'Debit Card', 'Net Banking', 'UPI', 'Wallet', 'Cash on Delivery')), -- Payment method used
    TransactionAmount NUMBER(10, 2) NOT NULL CHECK (TransactionAmount >= 0), -- Amount for the transaction
    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date and time of the transaction
    TransactionStatus VARCHAR2(20) NOT NULL CHECK (TransactionStatus IN ('Pending', 'Successful', 'Failed', 'Refunded')), -- Status of the transaction
    ReferenceNumber VARCHAR2(50), -- Optional reference number for external payment gateway
    RefundAmount NUMBER(10, 2) DEFAULT 0 CHECK (RefundAmount >= 0), -- Refund amount (if applicable)
    RefundDate TIMESTAMP, -- Date of refund (if applicable)
    PaymentGateway VARCHAR2(100), -- Name of the payment gateway (e.g., Razorpay, Stripe)
    Notes CLOB, -- Optional field for additional details or comments
    DateUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Timestamp for last update
);


CREATE TABLE Ledger (
    LedgerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique Ledger ID
    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date and time of the transaction
    UserID NUMBER REFERENCES UserMaster(UserMasterID) ON DELETE SET NULL, -- User involved in the transaction
    OrderID NUMBER REFERENCES Orders(OrderID) ON DELETE CASCADE, -- Associated Order ID (nullable for non-order transactions)
    ProductID NUMBER REFERENCES Products(ProductID) ON DELETE SET NULL, -- Associated Product ID (nullable for non-product transactions)
    VariantID NUMBER REFERENCES ProductVariants(VariantID), -- Associated Variant ID (nullable)
    TransactionType VARCHAR2(50) NOT NULL CHECK (TransactionType IN (
        'Sale', 'Refund', 'Discount', 'Restocking', 'Shipping Fee', 'Gateway Fee', 'Adjustment'
    )), -- Type of transaction
    TransactionAmount NUMBER(12, 2) NOT NULL CHECK (TransactionAmount >= 0), -- Amount for the transaction
    PaymentMethod VARCHAR2(50) CHECK (PaymentMethod IN (
        'Credit Card', 'Debit Card', 'Net Banking', 'Cash on Delivery', 'UPI', 'Wallet', 'Adjustment'
    )), -- Payment method used (nullable for internal adjustments)
    Description CLOB, -- Description or notes about the transaction
    BalanceAfterTransaction NUMBER(15, 2), -- Running balance after the transaction
    CreatedBy VARCHAR2(50), -- Admin or system user who created the transaction
    CreatedDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp when the transaction was created
    UpdatedBy VARCHAR2(50), -- Admin or system user who updated the transaction
    UpdatedDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Timestamp when the transaction was last updated
);
